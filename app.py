"""
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
- –í—ã–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–æ–≤ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
- –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ CSV/JSON

–§–æ—Ä–º–∞—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π:
{
  "onset": 12.5,        # –Ω–∞—á–∞–ª–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (float)
  "duration": 0.8,      # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (float > 0)
  "description": "eye_blink"  # –º–µ—Ç–∫–∞ (—Å—Ç—Ä–æ–∫–∞)
}
"""
from dataset_loader import load_dataset, datasets_list as dtl

import dash
from dash import dcc, html, Input, Output, State, no_update
from dash.dependencies import ALL

import plotly.graph_objs as go
import pandas as pd
import numpy as np
import json

from base64 import b64decode
from io import BytesIO
from datetime import datetime
from os import path as ospath, makedirs
from mne import pick_types, Annotations

# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø

# –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
SAVE_FOLDER = "saved_annotations"      # —Ä—É—á–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
AUTOSAVE_FOLDER = "autosave"          # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
makedirs(SAVE_FOLDER, exist_ok=True)
makedirs(AUTOSAVE_FOLDER, exist_ok=True)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∏–≥–Ω–∞–ª—É
STEP_SECONDS = 5.0        # —à–∞–≥ –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–í–ø–µ—Ä—ë–¥/–ù–∞–∑–∞–¥"
DEFAULT_DECIM = 1         # –¥–µ—Ü–∏–º–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (1 = –±–µ–∑ –ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏—è)

# –°–æ–∑–¥–∞–Ω–∏–µ Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = dash.Dash(__name__)
app.title = "–†–∞–∑–º–µ—Ç–∫–∞ –≠–≠–ì"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def label_to_color(label: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Ü–≤–µ—Ç –¥–ª—è –º–µ—Ç–∫–∏."""
    h = abs(hash(label)) % 360
    s = 65 + (abs(hash(label + 's')) % 20)
    l = 45 + (abs(hash(label + 'l')) % 10)
    import colorsys
    r, g, b = colorsys.hls_to_rgb(h/360.0, l/100.0, s/100.0)
    return '#{0:02x}{1:02x}{2:02x}'.format(int(r*255), int(g*255), int(b*255))


def _normalize_annotation_entry(entry: dict):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ñ–æ—Ä–º–∞—Ç:
    {'onset': float, 'duration': float, 'description': str}
    """
    if not isinstance(entry, dict):
        return None
    try:
        onset = float(entry['onset'])
        duration = float(entry['duration'])
        description = str(entry['description'])
        if duration <= 0:
            return None
        return {'onset': onset, 'duration': duration, 'description': description}
    except (KeyError, ValueError, TypeError):
        return None


def anns_list_to_mne(anns_list):
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç MNE."""
    if not anns_list:
        return Annotations([], [], [])
    onsets = [float(a['onset']) for a in anns_list]
    durations = [float(a['duration']) for a in anns_list]
    descriptions = [str(a['description']) for a in anns_list]
    return Annotations(onsets=onsets, durations=durations, description=descriptions)


def mne_annotations_to_list(anns: Annotations):
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ MNE –æ–±—Ä–∞—Ç–Ω–æ –≤ –Ω–∞—à —Å–ø–∏—Å–æ–∫."""
    if anns is None:
        return []
    return [{'onset': float(onset), 'duration': float(dur), 'description': desc}
            for onset, dur, desc in zip(anns.onset, anns.duration, anns.description)]


def parse_csv_or_json(contents, filename):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏–∑ CSV –∏–ª–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [{'onset':..., 'duration':..., 'description':...}]
    """
    if not contents:
        return None, "–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
    try:
        content_type, content_string = contents.split(',')
    except Exception:
        return None, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç contents"
    decoded = b64decode(content_string)
    txt = decoded.decode('utf-8', errors='ignore')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON
    if filename.lower().endswith('.json'):
        try:
            obj = json.loads(txt)
            if isinstance(obj, dict) and 'annotations' in obj:
                obj = obj['annotations']
            if not isinstance(obj, list):
                return None, "JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"
            anns = []
            for it in obj:
                new = _normalize_annotation_entry(it)
                if new is not None:
                    anns.append(new)
            return anns, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(anns)} –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π (JSON)"
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)[:100]}"

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
    try:
        df = pd.read_csv(BytesIO(decoded))
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {str(e)[:120]}"
    if df is None or df.shape[1] < 3:
        return None, "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 –∫–æ–ª–æ–Ω–∫–∏"

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    cols = [c.lower() for c in df.columns]
    df.columns = cols

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    required = ['onset', 'duration', 'description']
    if not all(c in cols for c in required):
        return None, "CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: onset, duration, description"

    anns = []
    for _, r in df.iterrows():
        try:
            t0 = float(r['onset'])
            dur = float(r['duration'])
            lab = str(r['description']).strip()
            if dur > 0:
                anns.append({'onset': t0, 'duration': dur, 'description': lab})
        except Exception:
            continue    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    return anns, f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(anns)} –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π (CSV)"


def autosave_write(dataset_name, anns):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫—É autosave –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    fname = ospath.join(AUTOSAVE_FOLDER, f"autosave_{dataset_name}.json")
    try:
        with open(fname, 'w', encoding='utf-8') as f:
            json.dump({'annotations': anns, 'saved_at': datetime.now().isoformat()},
                      f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        return False


def autosave_read(dataset_name):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    fname = ospath.join(AUTOSAVE_FOLDER, f"autosave_{dataset_name}.json")
    try:
        if not ospath.exists(fname):
            return []
        with open(fname, 'r', encoding='utf-8') as f:
            obj = json.load(f)
        anns = obj.get('annotations', [])
        out = []
        for a in anns:
            new = _normalize_annotation_entry(a)
            if new is not None:
                out.append(new)
        return out
    except Exception:
        return []


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å

app.layout = html.Div([
    # –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
    html.Div([
        html.H3("üìÅ –î–∞–Ω–Ω—ã–µ", className="section-title"),
        html.Div([
            html.Div([
                html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç:", className="slider-label"),
                dcc.Dropdown(
                    id='dataset-dropdown',
                    options=[{'label': f"{k} ‚Äî {v}", 'value': k} for k, v in dtl.items()],
                    value='sample',
                    clearable=False
                ),
                html.Div(id='loading-status')
            ], className="data-col"),
            html.Div([
                html.Label("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (CSV –∏–ª–∏ JSON):", className="slider-label"),
                dcc.Upload(
                    id='upload-annotations',
                    children=html.Div(['–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ ', html.A('–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª')]),
                    className="upload-area",
                    multiple=False
                ),
                html.Div(id='upload-status')
            ], className="data-col")
        ], className="data-row")
    ], className="card"),

    # –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    html.Div([
        html.H3("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", className="section-title"),
        html.Div([
            html.Div([
                html.Label("–ö–∞–Ω–∞–ª—ã:"),
                dcc.Dropdown(id='channel-dropdown', clearable=False, multi=True)
            ], className="settings-col settings-col-left"),
            html.Div([
                html.Label("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ (—Å–µ–∫):"),
                dcc.Slider(id='window-slider', min=2, max=120, step=1, value=10,
                           marks={i: str(i) for i in range(2,121,10)}),
                html.Br(),
                html.Label("–ù–∞—á–∞–ª–æ –æ–∫–Ω–∞ (—Å–µ–∫):"),
                dcc.Slider(id='start-slider', min=0, max=100, step=0.1, value=0,
                           tooltip={"placement":"bottom"}),
                html.Br(),
                html.Label("–î–µ—Ü–∏–º–∞—Ü–∏—è:"),
                dcc.Slider(id='decim-slider', min=1, max=20, step=1, value=DEFAULT_DECIM,
                           marks={1:'1',2:'2',5:'5',10:'10',20:'20'})
            ], className="settings-col settings-col-right"),
        ], className="settings-row")
    ], className="card"),

    # –ë–ª–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    html.Div([
        html.H3("üìä –°–∏–≥–Ω–∞–ª", className="section-title"),
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        html.Div([
            html.Button('‚èÆ –ù–∞–∑–∞–¥', id='seek-back-btn', n_clicks=0, className="seek-btn"),
            html.Button('‚è≠ –í–ø–µ—Ä—ë–¥', id='seek-forward-btn', n_clicks=0, className="seek-btn"),
            html.Span(id='export-feedback')
        ], className="seek-controls"),
        # –ì—Ä–∞—Ñ–∏–∫ –≠–≠–ì
        dcc.Graph(id='eeg-graph', config={
            'modeBarButtonsToRemove': ['zoom2d','pan2d','zoomIn2d','zoomOut2d',
                                       'autoScale2d','resetScale2d','toImage'],
            'displayModeBar': True, 'displaylogo': False
        }),
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è)
        html.Div(id='annotation-input-area', className="annotation-input-area hidden", children=[
            html.Div(id='selection-info', className="feedback"),
            html.Div([
                dcc.Input(id='label-input', type='text', placeholder='–ú–µ—Ç–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: eye_blink)', className="label-input"),
                html.Button('+ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∫—É', id='add-annotation-btn', n_clicks=0, className="btn-add")
            ], className="annotation-form"),
            html.Div(id='annotation-feedback', className="feedback")
        ])
    ], className="card graph-container"),

    # –ë–ª–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    html.Div([
        html.H3("üìù –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏", className="section-title"),
        html.Div(id='annotations-table'),
        html.Div([
            html.Button('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ', id='clear-annotations-btn', n_clicks=0, className="btn"),
            html.Button('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV', id='save-local-csv-btn', n_clicks=0, className="btn"),
            html.Button('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON', id='save-local-json-btn', n_clicks=0, className="btn"),
        ], className="save-buttons"),
        html.Div(id='save-feedback', className="feedback")
    ], className="card"),

    # –ù–µ–≤–∏–¥–∏–º—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É callback'–∞–º–∏)
    dcc.Store(id='annotations-store', data=[]),          # —Ç–µ–∫—É—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    dcc.Store(id='current-selection', data=None),        # —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
    dcc.Store(id='raw-info', data={}),                   # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ (sfreq, duration)
    dcc.Store(id='current-dataset', data=None),      # —Ç–µ–∫—É—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç
])


# Callbacks

@app.callback(
    [Output('channel-dropdown', 'options'),
     Output('channel-dropdown', 'value'),
     Output('start-slider', 'max'),
     Output('loading-status', 'children'),
     Output('raw-info', 'data'),
     Output('current-dataset', 'data')],
    Input('dataset-dropdown', 'value')
)
def update_dataset(dataset_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–≥–Ω–∞–ª–µ.
    –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
    """
    try:
        raw = load_dataset(dataset_name)
        # –í—ã–±–æ—Ä EEG-–∫–∞–Ω–∞–ª–æ–≤
        picks = pick_types(raw.info, eeg=True, exclude='bads')
        if len(picks) == 0:
            raise ValueError("–í –î–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≠–≠–ì")

        channels = [raw.ch_names[i] for i in picks]
        duration = float(raw.times[-1])
        autos = autosave_read(dataset_name)
        msg = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {dataset_name} | –ö–∞–Ω–∞–ª–æ–≤: {len(channels)}"
        if autos:
            msg += f" | –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ({len(autos)} –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π)."
        return (
            [{'label': ch, 'value': ch} for ch in channels],
            [channels[0]] if channels else None,
            max(10, duration - 10),
            msg,
            {'sfreq': raw.info['sfreq'], 'duration': duration},
            dataset_name
        )
    except Exception as e:
        return no_update, no_update, no_update, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", no_update, no_update


@app.callback(
    [Output('annotations-store', 'data', allow_duplicate=True),
     Output('upload-status', 'children')],
    Input('upload-annotations', 'contents'),
    State('upload-annotations', 'filename'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def upload_annotations(contents, filename, dataset):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ (CSV/JSON).
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
    """
    if not contents:
        return dash.no_update, ""
    anns, msg = parse_csv_or_json(contents, filename)
    color = 'green' if anns is not None else 'red'
    if anns is None:
        return dash.no_update, html.Div(msg, style={'color':color})
    autosave_write(dataset, anns)
    return anns, html.Div(msg, style={'color':color})


@app.callback(
    Output('eeg-graph', 'figure'),
    [Input('channel-dropdown', 'value'),
     Input('window-slider', 'value'),
     Input('start-slider', 'value'),
     Input('annotations-store', 'data'),
     Input('raw-info', 'data'),
     Input('decim-slider', 'value')],
    State('current-dataset', 'data'),
    prevent_initial_call=False
)
def update_graph(channels, window_dur, start_time, annotations, raw_info, decim, dataset_name):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –≠–≠–ì:
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ—Ü–∏–º–∞—Ü–∏—é –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
    - –†–∏—Å—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫–∞–∫ —Ü–≤–µ—Ç–Ω—ã–µ –ø–æ–ª–æ—Å—ã
    - –§–∏–∫—Å–∏—Ä—É–µ—Ç –º–∞—Å—à—Ç–∞–± –ø–æ –æ—Å–∏ Y –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    """
    if not all([channels, raw_info, dataset_name]):
        return go.Figure()
    if isinstance(channels, str):
        channels = [channels]

    raw = load_dataset(dataset_name)
    sfreq = raw_info['sfreq']
    duration = raw_info['duration']
    end_time = min(start_time + window_dur, duration)
    start_samp = int(start_time * sfreq)
    end_samp = int(end_time * sfreq)

    # –†–∞—Å—á—ë—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    picks = [raw.ch_names.index(ch) for ch in channels]
    full_data = raw.get_data(picks=picks)
    global_max_ampl = np.max(np.abs(full_data)) if full_data.size > 0 else 1.0
    separation = global_max_ampl * 3.0 # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
    window_data = raw.get_data(picks=picks, start=start_samp, stop=end_samp)
    times = np.arange(start_samp, end_samp) / sfreq

    # –î–µ—Ü–∏–º–∞—Ü–∏—è (–ø—Ä–æ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ) –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    if decim > 1:
        window_data = window_data[:, ::decim]
        times = times[::decim]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = go.Figure()
    offsets = [i * separation for i in range(len(channels))]

    for i, ch in enumerate(channels):
        y = window_data[i, :] + offsets[i]
        fig.add_trace(go.Scatter(x=times, y=y, mode='lines', name=ch, line=dict(width=1)))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
    for ann in (annotations or []):
        try:
            t0 = float(ann['onset'])
            dur = float(ann['duration'])
        except Exception:
            continue
        t1 = t0 + dur
        if t1 < start_time or t0 > end_time:
            continue
        color = label_to_color(ann['description'])
        fig.add_vrect(x0=t0, x1=t1, fillcolor=color, opacity=0.25, layer="below", line_width=0)
        fig.add_annotation(
            x=max(t0, start_time),
            y=offsets[-1] + global_max_ampl if offsets else global_max_ampl,
            text=ann['description'],
            showarrow=False,
            font=dict(size=10, color=color)
        )

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –ø–æ Y
    total_offset = offsets[-1] if offsets else 0
    y_min = -global_max_ampl
    y_max = total_offset + global_max_ampl

    fig.update_layout(
        title=f"–ö–∞–Ω–∞–ª—ã: {', '.join(channels)}",
        xaxis_title="–í—Ä–µ–º—è (—Å–µ–∫)",
        yaxis=dict(showticklabels=False, range=[y_min, y_max]),
        dragmode='select',
        height=600,
        margin=dict(l=40, r=20, t=40, b=40),
        plot_bgcolor='white',
        paper_bgcolor='white'
    )
    return fig


@app.callback(
    [Output('current-selection', 'data'),
     Output('selection-info', 'children'),
     Output('annotation-input-area', 'className')],
    Input('eeg-graph', 'selectedData'),
    State('start-slider', 'value'),
    State('window-slider', 'value'),
    prevent_initial_call=True
)
def handle_selection(sel, start, window):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –º–µ—Ç–∫–∏, –µ—Å–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    if not sel or 'range' not in sel:
        return None, "", "annotation-input-area hidden"
    x0, x1 = sel['range']['x']
    if x0 > x1: x0, x1 = x1, x0
    x0 = max(x0, start)
    x1 = min(x1, start + window)
    if x1 <= x0:
        return None, "", "annotation-input-area hidden"
    return {'x0': float(x0), 'x1': float(x1)}, f"–í—ã–¥–µ–ª–µ–Ω —É—á–∞—Å—Ç–æ–∫: {x0:.3f} ‚Äì {x1:.3f} —Å–µ–∫", "annotation-input-area"


@app.callback(
    [Output('annotations-store', 'data', allow_duplicate=True),
     Output('annotation-feedback', 'children')],
    Input('add-annotation-btn', 'n_clicks'),
    [State('current-selection', 'data'),
     State('label-input', 'value'),
     State('annotations-store', 'data'),
     State('current-dataset', 'data')],
    prevent_initial_call=True
)
def add_annotation(nc, sel, label, anns, dataset):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–π –º–µ—Ç–∫–∏.
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.
    """
    if not sel:
        return anns, "‚ö†Ô∏è –ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"
    if not label or not label.strip():
        return anns, "‚ö†Ô∏è –ú–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è"
    onset = float(sel['x0'])
    duration = float(sel['x1']) - float(sel['x0'])
    if duration <= 0:
        return anns, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    new = {'onset': onset, 'duration': duration, 'description': label.strip()}
    out = (anns or []) + [new]
    autosave_write(dataset, out)
    return out, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ"


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input('clear-annotations-btn', 'n_clicks'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def clear_annotations(_n, dataset):
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
    """
    autosave_write(dataset, [])
    return []


@app.callback(
    Output('annotations-table', 'children'),
    Input('annotations-store', 'data')
)
def update_table(anns):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π.
    –ö–∞–∂–¥–∞—è —è—á–µ–π–∫–∞ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ.
    """
    if not anns:
        return html.P("–ù–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π", className="feedback")
    rows = []
    rows.append(html.Thead(html.Tr([
        html.Th("‚Ññ"),
        html.Th("–ù–∞—á–∞–ª–æ (—Å–µ–∫)"),
        html.Th("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"),
        html.Th("–ú–µ—Ç–∫–∞"),
        html.Th("–î–µ–π—Å—Ç–≤–∏–µ")
    ])))
    body_trs = []
    for i, a in enumerate(anns):
        onset_in = dcc.Input(
            id={'type': 'edit-onset', 'index': i},
            value=f"{a['onset']:.3f}",
            type='number',
            step=0.001,
            className="edit-input"
        )
        dur_in = dcc.Input(
            id={'type': 'edit-duration', 'index': i},
            value=f"{a['duration']:.3f}",
            type='number',
            step=0.001,
            min=0.001,
            className="edit-input"
        )
        label_in = dcc.Input(
            id={'type': 'edit-description', 'index': i},
            value=a['description'],
            type='text',
            className="edit-label-input"
        )
        delete_btn = html.Button("‚ùå", id={'type': 'delete-btn', 'index': i}, n_clicks=0, className="delete-btn")
        body_trs.append(html.Tr([
            html.Td(str(i)),
            html.Td(onset_in),
            html.Td(dur_in),
            html.Td(label_in),
            html.Td(delete_btn)
        ]))
    rows.append(html.Tbody(body_trs))
    return html.Table(rows, className="annotations-table")


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input({'type':'delete-btn','index': ALL}, 'n_clicks'),
    State('annotations-store', 'data'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def delete_annotation(n_clicks_list, anns, dataset):
    """–£–¥–∞–ª—è–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É (–∫–Ω–æ–ø–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ)."""
    if not anns:
        return anns
    for i, n in enumerate(n_clicks_list):
        if n and n > 0:
            new = list(anns)
            if 0 <= i < len(new):
                new.pop(i)
                autosave_write(dataset, new)
                return new
    return anns


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input({'type':'edit-onset','index': ALL}, 'value'),
    State('annotations-store', 'data'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def edit_onset(values, anns, dataset):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'onset' –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    if anns is None:
        return anns
    new = list(anns)
    updated = False
    for i, v in enumerate(values):
        try:
            vf = float(v)
        except Exception:
            continue
        if 0 <= i < len(new):
            new[i]['onset'] = float(vf)
            updated = True
    if updated:
        autosave_write(dataset, new)
    return new


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input({'type':'edit-duration','index': ALL}, 'value'),
    State('annotations-store', 'data'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def edit_duration(values, anns, dataset):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'duration' –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    if anns is None:
        return anns
    new = list(anns)
    updated = False
    for i, v in enumerate(values):
        try:
            vf = float(v)
        except Exception:
            continue
        if 0 <= i < len(new) and vf > 0:
            new[i]['duration'] = float(vf)
            updated = True
    if updated:
        autosave_write(dataset, new)
    return new


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input({'type':'edit-description','index': ALL}, 'value'),
    State('annotations-store', 'data'),
    State('current-dataset', 'data'),
    prevent_initial_call=True
)
def edit_description(values, anns, dataset):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 'description' –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""
    if anns is None:
        return anns
    new = list(anns)
    updated = False
    for i, v in enumerate(values):
        if 0 <= i < len(new) and v != new[i]['description']:
            new[i]['description'] = str(v)
            updated = True
    if updated:
        autosave_write(dataset, new)
    return new


@app.callback(
    Output('start-slider', 'value'),
    [Input('seek-back-btn', 'n_clicks'),
     Input('seek-forward-btn', 'n_clicks')],
    State('start-slider', 'value'),
    prevent_initial_call=True
)
def seek(back, forward, start_val):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ '–ù–∞–∑–∞–¥' –∏ '–í–ø–µ—Ä—ë–¥'."""
    ctx = dash.callback_context
    if not ctx.triggered:
        return start_val
    button_id = ctx.triggered[0]['prop_id'].split('.')[0]
    if button_id == 'seek-back-btn':
        new = max(0.0, start_val - STEP_SECONDS)
    elif button_id == 'seek-forward-btn':
        new = start_val + STEP_SECONDS
    else:
        new = start_val
    return float(new)


@app.callback(
    Output('save-feedback', 'children'),
    [Input('save-local-csv-btn', 'n_clicks'),
     Input('save-local-json-btn', 'n_clicks')],
    [State('annotations-store', 'data'),
     State('current-dataset', 'data')],
    prevent_initial_call=True
)
def save_to_disk(save_csv, save_json, anns, dataset):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ CSV –∏–ª–∏ JSON –≤ –ø–∞–ø–∫—É saved_annotations.
    """
    ctx = dash.callback_context
    if not ctx.triggered:
        return ""
    which = ctx.triggered[0]['prop_id'].split('.')[0]
    if not anns:
        return "‚ö†Ô∏è –ù–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
    df = pd.DataFrame(anns)[['onset','duration','description']]
    now = datetime.now().strftime('%Y%m%d_%H%M%S')
    try:
        if which == 'save-local-csv-btn':
            fname = f"{dataset}_annotations_{now}.csv"
            df.to_csv(ospath.join(SAVE_FOLDER, fname), index=False, encoding='utf-8')
            return f"‚úÖ CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fname}"
        elif which == 'save-local-json-btn':
            fname = f"{dataset}_annotations_{now}.json"
            j = df.to_dict(orient='records')
            with open(ospath.join(SAVE_FOLDER, fname), 'w', encoding='utf-8') as f:
                json.dump(j, f, ensure_ascii=False, indent=2)
            return f"‚úÖ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {fname}"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}"
    return ""


@app.callback(
    Output('export-feedback', 'children'),
    Input('annotations-store', 'data'),
    State('current-dataset', 'data'),
    prevent_initial_call=False
)
def autosave_callback(anns, dataset):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π."""
    ok = autosave_write(dataset, anns or [])
    return "" if ok else "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"


@app.callback(
    Output('annotations-store', 'data', allow_duplicate=True),
    Input('dataset-dropdown', 'value'),
    State('annotations-store', 'data'),
    prevent_initial_call=True
)
def load_autosave(dataset, current):
    """
    –ü—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –ø—É—Å—Ç.
    """
    autos = autosave_read(dataset)
    if autos and (not current or len(current)==0):
        return autos
    return current


if __name__ == '__main__':
    app.run(debug=True)